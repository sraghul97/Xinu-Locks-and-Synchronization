#########################################################################
#                                                                       #
#                                                                       #
#  Makefile for the VBOX version of Xinu,                               #
#  using as much as possible from the Galileo code                      #
#                                                                       #
#  includes: .d generated during compilation and Makedefs               #
#                                                                       #
#                                                                       #
#########################################################################


HOST_OSTYPE	:=	$(shell uname -s)
PNAME		:=	Vbox
PLAT		:=	Platform_$(PNAME)
TOPDIR		:=	..

ifeq ($(HOST_OSTYPE),Linux)
# toolchain for linux
COMPILER_ROOT	:=	/usr/bin/
CC			:=	${COMPILER_ROOT}gcc-4.8
LD			:=	${COMPILER_ROOT}ld
OBJCOPY		:=	${COMPILER_ROOT}objcopy
HOST_NCPU	:=	$(shell nproc)
else ifeq ($(HOST_OSTYPE),Darwin)
# toolchain configuration for Intel mac
# for M1 mac you might need to change the compiler root to /opt/homebrew/bin
COMPILER_ROOT	:=	/usr/local/bin/
CC			:=	${COMPILER_ROOT}i686-elf-gcc
LD			:=	${COMPILER_ROOT}i686-elf-ld
OBJCOPY		:=	${COMPILER_ROOT}i686-elf-objcopy
HOST_NCPU	:=	$(shell sysctl -n hw.logicalcpu)
else
$(error Unsupported host operating system)
endif

XINU		=	$(TOPDIR)/compile/xinu.elf
XINUMAP		=	$(TOPDIR)/compile/xinu.map
XINUBIN		=	$(TOPDIR)/compile/xinu.bin
XINUXBIN	=	$(TOPDIR)/compile/xinu
MAKEXBIN 	=	$(TOPDIR)/compile/bin/buildxbin
BUILDMAKE	=	$(TOPDIR)/compile/bin/build-make

DEFSFILE	=	Makedefs
VERSIONFILE	=	version
LDSCRIPT	=	ld.script
MKVERS		=	$(TOPDIR)/compile/bin/mkvers
BUILDMAKEFLAGS	=	-s $(TOPDIR)/system  debug.c 	\
			-s $(TOPDIR)/lib			\
			-s $(TOPDIR)/device/tty			\
			-s $(TOPDIR)/device/nam			\
			-s $(TOPDIR)/device/eth			\
			-s $(TOPDIR)/device/rds			\
			-s $(TOPDIR)/device/ram			\
			-s $(TOPDIR)/device/lfs			\
			-s $(TOPDIR)/device/rfs			\
			-s $(TOPDIR)/net  'arp_dump*'  		\
				'dhcp_dump*'  pxe.c		\
			-s $(TOPDIR)/shell  'xsh_rdstest*'

INCLUDE		=	-I$(TOPDIR)/include

# Amount to move loaded image down in memory
BRELOC  =	0x150000
BOOTPLOC=	0x150000

# Accepts extra macro definition through DEFS environment variable
DEFS		+= -DBRELOC=${BRELOC} -DBOOTPLOC=${BOOTPLOC} -DBSDURG -DVERSION=\""`cat $(VERSIONFILE)`"\"

# Compiler flags
CFLAGS  = -g -Og -march=i586 -m32 -fno-builtin -fno-stack-protector -fno-omit-frame-pointer -nostdlib -c -Wall ${DEFS} ${INCLUDE} -MMD -MP

# Loader flags
LDFLAGS = -dn -m elf_i386 -Map $(XINUMAP) -T $(LDSCRIPT)

# Dependency files will be generated during compilation (with -MMD -MP flags)
DEPS		= $(OBJ_FILES:.o=.d)

#--------------------------------------------------------------------------------
# Include generic make targets and rules from the file generated by build-make
#--------------------------------------------------------------------------------
-include $(DEFSFILE)

#--------------------------------------------------------------------------------
# Add files that require special rules and place start.o at the front
#--------------------------------------------------------------------------------
LD_LIST = binaries/start.o $(filter-out binaries/start.o,$(OBJ_FILES))

#------------------------------------------------------------
# Rules for files that need special handling
#------------------------------------------------------------

# Define variables for the Configuration file and generated files

CONFFILE	= $(TOPDIR)/config/Configuration
CONFH		= $(TOPDIR)/include/conf.h
CONFC		= $(TOPDIR)/system/conf.c

# Define variables for the config program and its sources

CONFPGM		= $(TOPDIR)/config/config
CONFL		= $(TOPDIR)/config/config.l
CONFY		= $(TOPDIR)/config/config.y

# Set up the required build directory structure
BLDDIRS	= binaries

#--------------------------------------------------------------------------------
# Build dependency
#--------------------------------------------------------------------------------
$(CONFPGM): $(CONFL) $(CONFY)
	@echo making the config program
	@make -C "$(TOPDIR)/config" clean all install

$(CONFH): $(CONFFILE) $(CONFPGM)

$(CONFC): $(CONFFILE) $(CONFPGM)

$(LD_LIST): $(DEFSFILE) $(CONFH) $(CONFC)

$(XINU): $(LD_LIST)
	$(LD) $(LDFLAGS) $^ -o $@

#--------------------------------------------------------------------------------
# Phony targets
#--------------------------------------------------------------------------------
#
# To build the kernel, make 'configure' target first to create all generated
# sources and initialize the build system.
#
#--------------------------------------------------------------------------------

.DEFAULT_GOAL:=xinu

.PHONY: newversion configure clean scrub kernel rebuild \
	vbox-vm-pxe-update vbox-vm-start vbox-vm-stop vbox-vm-reset vbox-vm-status xinu \
	qemu-open-console-onetime qemu-open-console-longterm qemu-run qemu-debug

# Make a new version string
newversion:
	@echo creating new version
	@$(MKVERS) $(PNAME) > $(VERSIONFILE)

# Generate config.c/h, update version tag, and rescan the source tree to
# discover all sources to compile
configure: $(CONFC) $(CONFH) newversion
	@if ! [ -d "$(BLDDIRS)" ]; then \
		mkdir -p "$(BLDDIRS)"; \
	fi
	@$(BUILDMAKE) $(BUILDMAKEFLAGS) > $(DEFSFILE)

# Clean most generated files except those related to versioning and source list
clean:
	@echo removing build byproduct ...
	@rm -f $(LD_LIST)
	@rm -f $(DEPS)

	@echo removing configuration files ...
	@rm -f "$(CONFH)" "$(CONFC)"
	@make -C "$(TOPDIR)/config" clean

	@echo removing xinu ...
	@rm -f "$(XINU)"
	@rm -f "$(XINUMAP)"

# Scrub all generated files
#
# After scrub, you must run target 'configure' before compiling the kernel
# to regenerate the list of source to compile
scrub: clean
	@echo removing version record ...
	@rm -f "$(VERSIONFILE)"
	@rm -f .vers_num
	@echo removing source list ...
	@rm -f "$(DEFSFILE)"
	@echo removing build directory ...
	@rm -fr "$(BLDDIRS)"

# Build the Xinu kernel
kernel: $(XINU)

# rebuild = clean, configure, and build
rebuild:
	make clean
	make configure
	make kernel -j$(HOST_NCPU)

#--------------------------------------------------------------------------------
# Vbox related phony targets
#--------------------------------------------------------------------------------
# To run Xinu in Vbox, you need to setup the Virtual Box as directed on Moodle.
# To open serial terminal on VCL, run `sudo minicom`.

# Build Xinu kernel and copy it to the TFTP server content root that hosts
# binaries for PXE boot the "backend" guest machine.
vbox-vm-pxe-update: $(XINU)
	@echo Copying xinu.elf to xinu.boot in the TFTP directory.
	@if [ -f /srv/tftp/xinu.grub ]; then \
		cp -fv $< /srv/tftp/xinu.boot; \
	elif [ -f ~/.config/VirtualBox/TFTP/xinu.grub ]; then \
		cp -fv $< ~/.config/VirtualBox/TFTP/xinu.boot; \
	else \
		echo >&2 "PXE TFTP root for VirtualBox not found"; \
	fi

# Virtual Box "backend" guest machine control -  start/stop/reset/status
vbox-vm-start: $(XINU)
	@VBoxManage startvm "backend" -type headless

vbox-vm-stop: $(XINU)
	@VBoxManage controlvm "backend" poweroff

vbox-vm-reset: $(XINU)
	@VBoxManage controlvm "backend" reset

vbox-vm-status: $(XINU)
	@VBoxManage showvminfo backend

# for grading compatibility
xinu:
	make rebuild
	make vbox-vm-pxe-update

#--------------------------------------------------------------------------------
# Include incremental build dependency rules generated by the compiler
#--------------------------------------------------------------------------------
-include $(DEPS)